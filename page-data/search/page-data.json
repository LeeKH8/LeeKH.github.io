{"componentChunkName":"component---src-pages-search-jsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"nodes":[{"excerpt":"Code & Solve 📘 GitHub Actions를 이용한 문제 해결과 배포 자동화 🚀 GitHub Actions는 개발 프로세스를 자동화하여 빌드, 테스트, 배포 등을 수행할 수 있는 강력한 도구이다.\n하지만 올바른 설정 없이는 원하는 대로 작동하지 않을 수 있다.\nDeployment 자동화를 위해 GitHub Actions의 Workflow를 설정…","fields":{"slug":"/Code N Solve/"},"frontmatter":{"date":"April 01, 2024","title":"🚀 GitHub Actions를 이용한 블로그 자동 배포 문제 해결 과정","tags":["GitHub Actions","Workflow","Deployment Automation","Personal Access Token","PAT","SSH Key","의존성 관리","Code N Solve"]},"rawMarkdownBody":"\n# Code & Solve 📘\n\n## GitHub Actions[^1]를 이용한 문제 해결과 배포 자동화 🚀\n\nGitHub Actions는 개발 프로세스를 자동화하여 빌드, 테스트, 배포 등을 수행할 수 있는 강력한 도구이다.\n하지만 올바른 설정 없이는 원하는 대로 작동하지 않을 수 있다.\nDeployment 자동화를 위해 GitHub Actions의 Workflow를 설정할 때 겪은 몇 가지 문제와 이를 해결하는 방법에 대해 이야기해보자.\n\n### Blog Deployment 자동화\n\n현재 블로그 테마는 [gatsby-starter-hoodie](https://github.com/devHudi/gatsby-starter-hoodie?tab=readme-ov-file)를 활용하고 있다.\n\n여기에 CI (Continuous Integration)[^2] 코드는 이미 작성되어 있고, Netlify를 통한 배포 방식이 설명되어 있지만 Github Pages를 이용해 배포를 하고 있었다.\n매번 `$ npm run deploy-gh` 명령을 하기 귀찮아져 자동화 Workflow를 만들기로 결심한다.\n\n### GitHub Actions Workflow 설정\n\n#### 1. GitHub Pages 자동 배포[^3][^4]\n\n- 시도:\n\n  - GitHub Pages에 자동으로 배포하기.\n    <details>\n    <summary>접기/펼치기</summary>\n\n        ```yaml\n        name: Build and Deploy\n\n        on:\n          push:\n            branches:\n              - main\n\n        jobs:\n          deploy:\n            runs-on: ubuntu-latest\n\n            steps:\n              - name: Checkout Repository\n                uses: actions/checkout@v2\n\n              - name: Setup Node.js\n                uses: actions/setup-node@v2\n                with:\n                  node-version: \"14\"\n\n              - name: Install Dependencies\n                run: npm install\n\n              - name: Build\n                run: npm run build\n\n              - name: Deploy to GitHub Pages\n                uses: peaceiris/actions-gh-pages@v3\n                with:\n                  deploy_key: ${{ secrets.ACCESS_TOKEN }}\n                  publish_dir: ./public\n                  publish_branch: gh-pages\n        ```\n\n    </details>\n\n- 문제:\n\n- Workflow 설정 파일(deploy.yml)을 작성했지만 Node.js 버전이 낮아 Gatsby 빌드 중 오류가 발생했다.\n  <details>\n  <summary>접기/펼치기</summary>\n\n      ```bash\n      error Gatsby requires Node.js 18.0.0 or higher (you have v14.21.3).\n      Upgrade Node to the latest stable release: https://gatsby.dev/upgrading-node-js\n      npm ERR! code ELIFECYCLE\n      ```\n\n  </details>\n\n#### 2. Node.js 버전 충돌\n\n- 문제:\n\n  - Workflow 설정에서는 14.21.3 버전이 지정되어 있었는데 Node.js의 버전 18.0.0 이상을 빌요로 하여 Gatsby 빌드 중 오류가 발생했다.\n\n- 시도:\n\n  - Node.js 버전(node-version)을 20.3.1로 업데이트하였다.\n\n    <details>\n    <summary>접기/펼치기</summary>\n    ```yaml\n    name: Build and Deploy\n\n            on:\n            push:\n            branches: - main\n\n            jobs:\n            deploy:\n            runs-on: ubuntu-latest\n\n                  steps:\n                    - name: Checkout Repository\n                      uses: actions/checkout@v2\n\n                    - name: Setup Node.js\n                      uses: actions/setup-node@v2\n                      with:\n                        node-version: 20.3.1\n\n                    - name: Install Dependencies\n                      run: npm install\n\n                    - name: Build\n                      run: npm run build\n\n                    - name: Deploy to GitHub Pages\n                      uses: peaceiris/actions-gh-pages@v3\n                      with:\n                        deploy_key: ${{ secrets.ACCESS_TOKEN }}\n                        publish_dir: ./public\n                        publish_branch: gh-pages\n            ```\n\n    </details>\n\n- 해결:\n\n  - Node.js 버전을 20.3.1로 업데이트하여 문제를 해결했지만 이후에 패키지 의존성 충돌 문제가 발생했다.\n    <details>\n    <summary>접기/펼치기</summary>\n\n    ```bash\n    Run npm install\n    npm ERR! code ERESOLVE\n    npm ERR! ERESOLVE could not resolve\n    npm ERR!\n    npm ERR! While resolving: gatsby-remark-katex@3.10.0\n    npm ERR! Found: gatsby@5.13.3\n    npm ERR! node_modules/gatsby\n    npm ERR!   gatsby@\"^5.11.0\" from the root project\n    npm ERR!   peer gatsby@\"^5.0.0-next\" from babel-plugin-remove-graphql-queries@5.13.1\n    npm ERR!   node_modules/babel-plugin-remove-graphql-queries\n    npm ERR!     babel-plugin-remove-graphql-queries@\"^5.13.1\" from gatsby@5.13.3\n    npm ERR!     babel-plugin-remove-graphql-queries@\"^5.13.1\" from gatsby-plugin-typescript@5.13.1\n    npm ERR!     node_modules/gatsby-plugin-typescript\n    npm ERR!       gatsby-plugin-typescript@\"^5.13.1\" from gatsby@5.13.3\n    npm ERR!   17 more (gatsby-plugin-catch-links, gatsby-plugin-feed, ...)\n    npm ERR!\n    npm ERR! Could not resolve dependency:\n    npm ERR! peer gatsby@\"^2.0.0\" from gatsby-remark-katex@3.10.0\n    npm ERR! node_modules/gatsby-remark-katex\n    npm ERR!   gatsby-remark-katex@\"^3.5.0\" from the root project\n    npm ERR!\n    npm ERR! Conflicting peer dependency: gatsby@2.32.13\n    npm ERR! node_modules/gatsby\n    npm ERR!   peer gatsby@\"^2.0.0\" from gatsby-remark-katex@3.10.0\n    npm ERR!   node_modules/gatsby-remark-katex\n    npm ERR!     gatsby-remark-katex@\"^3.5.0\" from the root project\n    npm ERR!\n    npm ERR! Fix the upstream dependency conflict, or retry\n    npm ERR! this command with --force or --legacy-peer-deps\n    npm ERR! to accept an incorrect (and potentially broken) dependency resolution.\n    ```\n\n</details>\n\n#### 3. Node.js 패키지 의존성 충돌 및 GitHub 토큰 시크릿 등록\n\n- 시도:\n\n  - 패키지 의존성 충돌 문제를 --legacy-peer-deps 명령으로 해결하고 GitHub 토큰을 시크릿에 등록을 하기로 했다.\n    <details>\n    <summary>접기/펼치기</summary>\n\n    ```yaml\n    name: Build and Deploy\n\n    on:\n      push:\n        branches:\n          - main\n\n    jobs:\n      deploy:\n        runs-on: ubuntu-latest\n\n        steps:\n          - name: Checkout Repository\n            uses: actions/checkout@v2\n\n          - name: Setup Node.js\n            uses: actions/setup-node@v2\n            with:\n              node-version: 20.3.1\n\n          - name: Install Dependencies\n            run: npm install --legacy-peer-deps\n\n          - name: Build\n            run: npm run build\n\n          - name: Deploy to GitHub Pages\n            uses: peaceiris/actions-gh-pages@v3\n            with:\n              deploy_key: ${{ secrets.ACCESS_TOKEN }}\n              publish_dir: ./public\n              publish_branch: gh-pages\n    ```\n\n</details>\n\n- 해결:\n\n  - 프로필 - Settings - Developer Settings - Personal access tokens에서 생성한 토큰을 복사하여 저장소 secrets에 등록했다.\n      <details>\n      <summary>접기/펼치기</summary>\n        ```bash\n        Run peaceiris/actions-gh-pages@v3\n          with:\n            deploy_key: ***\n            publish_dir: ./public\n            publish_branch: gh-pages\n            allow_empty_commit: false\n            keep_files: false\n            force_orphan: false\n            enable_jekyll: false\n            disable_nojekyll: false\n            exclude_assets: .github\n        [INFO] Usage https://github.com/peaceiris/actions-gh-pages#readme\n        Dump inputs\n          [INFO] DeployKey: true\n          [INFO] PublishBranch: gh-pages\n          [INFO] PublishDir: ./public\n          [INFO] DestinationDir:\n          [INFO] ExternalRepository:\n          [INFO] AllowEmptyCommit: false\n          [INFO] KeepFiles: false\n          [INFO] ForceOrphan: false\n          [INFO] UserName:\n          [INFO] UserEmail:\n          [INFO] CommitMessage:\n          [INFO] FullCommitMessage:\n          [INFO] TagName:\n          [INFO] TagMessage:\n          [INFO] EnableJekyll (DisableNoJekyll): false\n          [INFO] CNAME:\n          [INFO] ExcludeAssets .github\n\n        Setup auth token\n        [INFO] setup SSH deploy key\n        /usr/bin/chmod 700 /home/runner/.ssh\n        [INFO] wrote /home/runner/.ssh/known_hosts\n        /usr/bin/chmod 600 /home/runner/.ssh/known_hosts\n        [INFO] wrote /home/runner/.ssh/github\n        /usr/bin/chmod 600 /home/runner/.ssh/github\n        [INFO] wrote /home/runner/.ssh/config\n        /usr/bin/chmod 600 /home/runner/.ssh/config\n        /usr/bin/ssh-add /home/runner/.ssh/github\n        Error loading key \"/home/runner/.ssh/github\": error in libcrypto\n        Error: Action failed with \"The process '/usr/bin/ssh-add' failed with exit code 1\"\n\n        ````\n\n    </details>\n\n#### 4. User authenticate using git config\n\n- 시도:\n  - token을 secret에 등록하였지만 token 인증에 실패하여 git config 명령을 통해 사용자를 등록하였다.\n- 문제:\n\n  - SSH 인증은 Windows 환경에서는 적용되지 않는 것 같다.\n      <details>\n      <summary>접기/펼치기</summary>\n        ```yaml\n        name: Build and Deploy\n\n        on:\n          push:\n            branches:\n              - main\n\n        jobs:\n          deploy:\n            runs-on: ubuntu-latest\n\n            steps:\n              - name: Checkout Repository\n                uses: actions/checkout@v2\n\n              - name: Setup Node.js\n                uses: actions/setup-node@v2\n                with:\n                  node-version: 20.3.1\n\n              - name: Install Dependencies\n                run: npm install --legacy-peer-deps\n\n              - name: Build\n                run: npm run build\n\n              - name: Deploy to GitHub Pages\n                env:\n                  ACCESS_TOKEN: ${{ secrets.PAT }}\n                run: |\n                  git config --global user.name \"USER NAME\"\n                  git config --global user.email \"USER@EMAIL.COM\"\n                  npx gh-pages -d ./public -b gh-pages -u $ACCESS_TOKEN\n        ````\n\n        </details>\n        - 문제\n          - git config 명령을 통해 사용자를 등록했지만 오류가 발생했다.\n          <details>\n          <summary>접기/펼치기</summary>\n        ```bash\n        Run git config --global user.name \"USER NAME\"\n          git config --global user.name \"USER NAME\"\n          git config --global user.email \"USER@EMAIL.COM\"\n          npx gh-pages -d ./public -b gh-pages -u $ACCESS_TOKEN\n          shell: /usr/bin/bash -e {0}\n          env:\n            ACCESS_TOKEN: ***\n        Could not parse name and email from user option \"***\" (format should be \"Your Name <email@example.com>\")\n        Error: Process completed with exit code 1.\n        ```\n\n    </details>\n\n#### 5. User authenticate using token\n\n- 시도:\n\n  - token으로 사용자 인증을 시도하였다.\n    <details>\n    <summary>접기/펼치기</summary>\n\n    ```yaml\n    name: Build and Deploy\n\n    on:\n      push:\n        branches:\n          - main\n\n    jobs:\n      deploy:\n        runs-on: ubuntu-latest\n\n        steps:\n          - name: Checkout Repository\n            uses: actions/checkout@v2\n\n          - name: Setup Node.js\n            uses: actions/setup-node@v2\n            with:\n              node-version: 20.3.1\n\n          - name: Install Dependencies\n            run: npm install --legacy-peer-deps\n\n          - name: Build\n            run: npm run build\n\n          - name: Deploy to GitHub Pages\n            env:\n              ACCESS_TOKEN: ${{ secrets.PAT }}\n            run: |\n              npx gh-pages -d ./public -b gh-pages -u $ACCESS_TOKEN\n    ```\n\n</details>\n- 문제:\n  - 같은 문제가 반복되었다.\n  <details>\n  <summary>접기/펼치기</summary>\n    ```bash\n    Run npx gh-pages -d ./public -b gh-pages -u $ACCESS_TOKEN\n      npx gh-pages -d ./public -b gh-pages -u $ACCESS_TOKEN\n      shell: /usr/bin/bash -e {0}\n      env:\n        ACCESS_TOKEN: ***\n    Could not parse name and email from user option \"***\" (format should be \"Your Name <email@example.com>\")\n    Error: Process completed with exit code 1.\n    ```\n</details>\n\n#### 6. User authenticate using token 2\n\n- 시도:\n\n  - 토큰을 이용해 사용자 인증을 시도할때 옵션을 -u에서 -t로 변경해 토큰을 인식하도록 해주었다.\n    <details>\n    <summary>접기/펼치기</summary>\n\n    ```yaml\n    name: Build and Deploy\n\n    on:\n      push:\n        branches:\n          - main\n\n    jobs:\n      deploy:\n        runs-on: ubuntu-latest\n\n        steps:\n          - name: Checkout Repository\n            uses: actions/checkout@v2\n\n          - name: Setup Node.js\n            uses: actions/setup-node@v2\n            with:\n              node-version: 20.3.1\n\n          - name: Install Dependencies\n            run: npm install --legacy-peer-deps\n\n          - name: Build\n            run: npm run build\n\n          - name: Deploy to GitHub Pages\n            env:\n              ACCESS_TOKEN: ${{ secrets.PAT }}\n            run: |\n              npx gh-pages -d ./public -b gh-pages -t $ACCESS_TOKEN\n    ```\n\n</details>\n- 문제:\n\n- git config 명령을 이용해 사용자의 신원을 설정하라는 오류(Author identity unknown)로 변경되었다.\n  <details>\n  <summary>접기/펼치기</summary>\n\n      ```bash\n      Run npx gh-pages -d ./public -b gh-pages -t $ACCESS_TOKEN\n        npx gh-pages -d ./public -b gh-pages -t $ACCESS_TOKEN\n        shell: /usr/bin/bash -e {0}\n        env:\n          ACCESS_TOKEN: ***\n      Author identity unknown\n\n      *** Please tell me who you are.\n\n      Run\n\n        git config --global user.email \"you@example.com\"\n        git config --global user.name \"Your Name\"\n\n      to set your account's default identity.\n      Omit --global to set the identity only in this repository.\n\n      fatal: unable to auto-detect email address (got 'runner@fv-az1535-535.(none)')\n\n      Error: Process completed with exit code 1.\n      ```\n\n</details>\n\n#### 7. User authenticate using git config 2\n\n- 시도:\n\n  - git config 명령을 사용해 사용자 정보를 인식할 수 있도록 해주었다.\n    <details>\n    <summary>접기/펼치기</summary>\n\n    ```yaml\n    name: Build and Deploy\n\n    on:\n      push:\n        branches:\n          - main\n\n    jobs:\n      deploy:\n        runs-on: ubuntu-latest\n\n        steps:\n          - name: Checkout Repository\n            uses: actions/checkout@v2\n\n          - name: Setup Node.js\n            uses: actions/setup-node@v2\n            with:\n              node-version: 20.3.1\n\n          - name: Install Dependencies\n            run: npm install --legacy-peer-deps\n\n          - name: Build\n            run: npm run build\n\n          - name: Deploy to GitHub Pages\n            env:\n              ACCESS_TOKEN: ${{ secrets.PAT }}\n            run: |\n              git config --global user.email \"USER@EMAIL.COM\"\n              git config --global user.name \"USER NAME\"\n              npx gh-pages -d ./public -b gh-pages -t $ACCESS_TOKEN\n    ```\n\n</details>\n\n- 문제:\n\n  - Author identity unknown 오류는 배포 시 Git 사용자 정보를 설정해두지 않아 발생하는 오류로 Git이 커밋을 생성할 때 사용자의 정보를 필요로 하기 때문에 발생하는데 문제가 반복되었다.\n      <details>\n      <summary>접기/펼치기</summary>\n        ```bash\n        Run git config --global user.email \"USER@EMAIL.COM\"\n          git config --global user.email \"USER@EMAIL.COM\"\n          git config --global user.name \"USER NAME\"\n          npx gh-pages -d ./public -b gh-pages -t $ACCESS_TOKEN\n          shell: /usr/bin/bash -e {0}\n          env:\n            ACCESS_TOKEN: ***\n        fatal: could not read Username for 'https://github.com': No such device or address\n\n        Error: Process completed with exit code 1.\n\n        ```\n\n    </details>\n\n#### 8. User authenticate using git config 3\n\n- 시도:\n\n  - HTTPS URL에 토큰을 추가하여 사용자를 인식할 수 있게 시도하였다.[^5]\n    <details>\n    <summary>접기/펼치기</summary>\n      ```yaml\n      name: Build and Deploy\n\n    on:\n    push:\n    branches: - main\n\n    jobs:\n    deploy:\n    runs-on: ubuntu-latest\n\n          steps:\n            - name: Checkout Repository\n              uses: actions/checkout@v2\n\n            - name: Setup Node.js\n              uses: actions/setup-node@v2\n              with:\n                node-version: 20.3.1\n\n            - name: Install Dependencies\n              run: npm install --legacy-peer-deps\n\n            - name: Build\n              run: npm run build\n\n            - name: Deploy to GitHub Pages\n              env:\n                ACCESS_TOKEN: ${{ secrets.PAT }}\n              run: |\n                git config --global url.https://${{ secrets.PAT }}@github.com/.insteadOf https://github.com/\n                npx gh-pages -d ./public -b gh-pages -t $ACCESS_TOKEN\n\n    ```\n\n    ```\n\n</details>\n\n- 문제:\n\n  - 여전히 Author identity unknown 상태이다.\n      <details>\n      <summary>접기/펼치기</summary>\n        ```bash\n        Run git config --global url.https://***@github.com/.insteadOf https://github.com/\n          git config --global url.https://***@github.com/.insteadOf https://github.com/\n          npx gh-pages -d ./public -b gh-pages -t $ACCESS_TOKEN\n          shell: /usr/bin/bash -e {0}\n          env:\n            ACCESS_TOKEN: ***\n        Author identity unknown\n\n        \\*\\*\\* Please tell me who you are.\n\n        Run\n\n        git config --global user.email \"you@example.com\"\n        git config --global user.name \"Your Name\"\n\n        to set your account's default identity.\n        Omit --global to set the identity only in this repository.\n\n        fatal: empty ident name (for <runner@fv-az1118-461.jboa14ee0bjuvjv5ua334yvpdd.cx.internal.cloudapp.net>) not allowed\n\n        Error: Process completed with exit code 1.\n\n        ````\n\n    </details>\n\n#### 9. User authenticate using git config 4\n\n- 시도:\n\n  - 다시 git config 명령을 사용해 사용자 정보를 추가하였다.\n      <details>\n      <summary>접기/펼치기</summary>\n        ```yaml\n        name: Build and Deploy\n\n        on:\n          push:\n            branches:\n              - main\n\n        jobs:\n          deploy:\n            runs-on: ubuntu-latest\n\n            steps:\n              - name: Checkout Repository\n                uses: actions/checkout@v2\n\n              - name: Setup Node.js\n                uses: actions/setup-node@v2\n                with:\n                  node-version: 20.3.1\n\n              - name: Install Dependencies\n                run: npm install --legacy-peer-deps\n\n              - name: Build\n                run: npm run build\n\n              - name: Deploy to GitHub Pages\n                env:\n                  ACCESS_TOKEN: ${{ secrets.PAT }}\n                run: |\n                  git config --global user.name \"USER NAME\"\n                  git config --global user.email \"USER@EMAIL.COM\"\n                  npx gh-pages -d ./public -b gh-pages -t $ACCESS_TOKEN\n        ````\n\n        </details>\n        - 문제:\n          - 이전에 나타났던 문제가 계속 나타나 눈물이 날 뻔 했다.\n          <details>\n          <summary>접기/펼치기</summary>\n        ```bash\n        Run git config --global user.name \"USER NAME\"\n          git config --global user.name \"USER NAME\"\n          git config --global user.email \"USER@EMAIL.COM\"\n          npx gh-pages -d ./public -b gh-pages -t $ACCESS_TOKEN\n          shell: /usr/bin/bash -e {0}\n          env:\n            ACCESS_TOKEN: ***\n        fatal: could not read Username for 'https://github.com': No such device or address\n        ```\n\n    </details>\n\n#### 10. User authenticate using git config 5\n\n- 시도:\n\n  - 혹시 토큰이 인식이 안되고 있나 의심스러워서 순서를 변경하여 다시 시도하였다.\n    <details>\n    <summary>접기/펼치기</summary>\n\n    ```yaml\n    name: Build and Deploy\n\n    on:\n      push:\n        branches:\n          - main\n\n    jobs:\n      deploy:\n        runs-on: ubuntu-latest\n        env:\n          PAT: ${{ secrets.PAT }}\n\n        steps:\n          - name: Checkout Repository\n            uses: actions/checkout@v2\n\n          - name: Setup Node.js\n            uses: actions/setup-node@v2\n            with:\n              node-version: 20.3.1\n\n          - name: Install Dependencies\n            run: npm install --legacy-peer-deps\n\n          - name: Build\n            run: npm run build\n\n          - name: Deploy to GitHub Pages\n            run: |\n              git config --global url.https://$PAT@github.com/.insteadOf https://github.com/\n              npx gh-pages -d ./public -b gh-pages -t $PAT\n    ```\n\n</details>\n\n- 문제:\n\n  - 달라지지 않은 오류 메시지가 나와 눈물이 났다.\n      <details>\n      <summary>접기/펼치기</summary>\n        ```bash\n        Run git config --global user.name \"USER NAME\"\n          git config --global user.name \"USER NAME\"\n          git config --global user.email \"USER@EMAIL.COM\"\n          npx gh-pages -d ./public -b gh-pages -t $ACCESS_TOKEN\n          shell: /usr/bin/bash -e {0}\n          env:\n            ACCESS_TOKEN: ***\n        fatal: could not read Username for 'https://github.com': No such device or address\n\n        Error: Process completed with exit code 1.\n        ```\n\n    </details>\n\n#### 11. User authenticate using git config 6\n\n- 시도:\n\n  - git config 명령을 빌드 과정에서 미리 해주면 될까 싶어 시도하였다.\n    <details>\n    <summary>접기/펼치기</summary>\n      ```yaml\n      name: Build and Deploy\n\n    on:\n    push:\n    branches: - main\n\n    jobs:\n    deploy:\n    runs-on: ubuntu-latest\n    env:\n    PAT: ${{ secrets.PAT }}\n\n          steps:\n            - name: Checkout Repository\n              uses: actions/checkout@v2\n\n            - name: Setup Node.js\n              uses: actions/setup-node@v2\n              with:\n                node-version: 20.3.1\n\n            - name: Install Dependencies\n              run: npm install --legacy-peer-deps\n\n            - name: Build\n              run: |\n                git config --global url.https://$PAT@github.com/.insteadOf https://github.com/\n                npm run build\n\n            - name: Deploy to GitHub Pages\n              run: |\n                npx gh-pages -d ./public -b gh-pages -t $PAT\n\n    ```\n\n    ```\n\n</details>\n\n- 해결:\n  - git config 명령을 deploy 과정 이전에 진행해야 한다는 결론을 얻었다.\n- 문제:\n\n  - 여전히 Author identity unknow 문제가 있다.\n    <details>\n    <summary>접기/펼치기</summary>\n      ```bash\n      Run npx gh-pages -d ./public -b gh-pages -t $PAT\n        npx gh-pages -d ./public -b gh-pages -t $PAT\n        shell: /usr/bin/bash -e {0}\n        env:\n          PAT: ***\n      Author identity unknown\n\n    \\*\\*\\* Please tell me who you are.\n\n    Run\n\n    git config --global user.email \"you@example.com\"\n    git config --global user.name \"Your Name\"\n\n    to set your account's default identity.\n    Omit --global to set the identity only in this repository.\n\n    fatal: unable to auto-detect email address (got 'runner@fv-az1385-401.(none)')\n\n    Error: Process completed with exit code 1.\n\n    ```\n\n    ```\n\n</details>\n\n#### 12. User authenticate using git config 7\n\n- 시도:\n\n  - git config 명령을 통한 사용자 정보 설정 단계를 별도로 만들어 주었다.\n    <details>\n    <summary>접기/펼치기</summary>\n      ```yaml\n      name: Build and Deploy\n\n    on:\n    push:\n    branches: - main\n\n    jobs:\n    deploy:\n    runs-on: ubuntu-latest\n    env:\n    PAT: ${{ secrets.PAT }}\n\n          steps:\n            - name: Checkout Repository\n              uses: actions/checkout@v2\n\n            - name: Setup Node.js\n              uses: actions/setup-node@v2\n              with:\n                node-version: 20.3.1\n\n            - name: Install Dependencies\n              run: npm install --legacy-peer-deps\n\n            - name: Build\n              run: npm run build\n\n            - name: Set Git user information\n              run: git config --global url.https://$PAT@github.com/.insteadOf https://github.com/\n\n            - name: Deploy to GitHub Pages\n              run: |\n                npx gh-pages -d ./public -b gh-pages -t $PAT\n\n    ```\n\n    ```\n\n</details>\n\n- 문제:\n\n  - 다시 눈물이 났다.\n      <details>\n      <summary>접기/펼치기</summary>\n        ```bash\n        Run npx gh-pages -d ./public -b gh-pages -t $PAT\n          npx gh-pages -d ./public -b gh-pages -t $PAT\n          shell: /usr/bin/bash -e {0}\n          env:\n            PAT: ***\n        Author identity unknown\n\n        \\*\\*\\* Please tell me who you are.\n\n        Run\n\n        git config --global user.email \"you@example.com\"\n        git config --global user.name \"Your Name\"\n\n        to set your account's default identity.\n        Omit --global to set the identity only in this repository.\n\n        fatal: empty ident name (for <runner@fv-az914-157.2e4pmxhwlzfuhnev11cd0y0noa.phxx.internal.cloudapp.net>) not allowed\n\n        Error: Process completed with exit code 1.\n\n        ```\n\n    </details>\n\n#### 13. User authenticate using git config 8\n\n- 시도:\n\n  - 사용자 정보 단계에서 가진 모든 정보를 알려주었다.\n    <details>\n    <summary>접기/펼치기</summary>\n      ```yaml\n      name: Build and Deploy\n\n    on:\n    push:\n    branches: - main\n\n    jobs:\n    deploy:\n    runs-on: ubuntu-latest\n    env:\n    PAT: ${{ secrets.PAT }}\n\n          steps:\n            - name: Checkout Repository\n              uses: actions/checkout@v2\n\n            - name: Setup Node.js\n              uses: actions/setup-node@v2\n              with:\n                node-version: 20.3.1\n\n            - name: Install Dependencies\n              run: npm install --legacy-peer-deps\n\n            - name: Build\n              run: npm run build\n\n            - name: Set Git user information\n              run: |\n                git config --global user.email \"amysun125@gmail.com\"\n                git config --global user.name \"leekh8\"\n\n            - name: Deploy to GitHub Pages\n              run: |\n                git config --global url.https://$PAT@github.com/.insteadOf https://github.com/\n                npx gh-pages -d ./public -b gh-pages -t $PAT\n\n    ```\n\n    ```\n\n</details>\n\n- 성공!\n\n```bash\nPublished\n```\n\n[^1]:\n\nhttps://docs.github.com/ko/enterprise-server@3.10/actions/learn-github-actions\n[^2]:\nhttps://docs.github.com/ko/enterprise-server@3.10/actions/automating-builds-and-tests/about-continuous-integration\n[^3]:\nhttps://docs.github.com/ko/enterprise-server@3.10/actions/examples/using-scripts-to-test-your-code-on-a-runner\n[^4]:\nhttps://docs.github.com/ko/enterprise-server@3.10/actions/using-workflows/workflow-syntax-for-github-actions\n[^5]:\nhttps://github.com/orgs/community/discussions/26580\n"},{"excerpt":"React 기초 정리 📘 Props와 State: React 컴포넌트의 핵심 이해하기 🚀 React를 사용하여 멋진 웹 애플리케이션을 만들기 위해 반드시 알아야 할 두 가지 개념, Props와 State에 대해 자세히 알아보자. 📦 Props란? 🤔 Props는 properties의 줄임말로, 컴포넌트 간에 데이터를 전달할 때 사용하는 입력값이다.\n부모 …","fields":{"slug":"/React-2-Props-State/"},"frontmatter":{"date":"May 02, 2023","title":"📘React 기초 정리 2 ","tags":["React","Props","State","Basic"]},"rawMarkdownBody":"\n# React 기초 정리 📘\n\n## Props와 State: React 컴포넌트의 핵심 이해하기 🚀\n\nReact를 사용하여 멋진 웹 애플리케이션을 만들기 위해 반드시 알아야 할 두 가지 개념, Props와 State에 대해 자세히 알아보자.[^1]\n\n### 📦 Props란? 🤔\n\nProps는 properties의 줄임말로, 컴포넌트 간에 데이터를 전달할 때 사용하는 입력값이다.\n부모 컴포넌트로부터 자식 컴포넌트로 데이터를 넘겨줄 수 있다.\n\n- 기본 사용법 🛠️\n\n  ```jsx\n  // 컴포넌트 생성\n  const Welcome = props => {\n    return <h1>Hello, {props.name} 🌟</h1>\n  }\n  // 컴포넌트 사용\n  const App = () => {\n    return (\n      <div>\n        <Welcome name=\"Amy\" />\n        <Welcome name=\"Andy\" />\n        <Welcome name=\"Sapiens\" />\n      </div>\n    )\n  }\n  ```\n\n- Props는 읽기 전용.\n- 컴포넌트 내에서 Props를 변경하려고 하면 안 된다. 🚫\n\n  ```jsx\n  // 잘못된 예\n  const Welcome = props => {\n    let greeting = \"Sir \" + props.name // 이렇게 사용하세요!\n    return <h1>Hello, {greeting}</h1>\n  }\n  ```\n\n### 🎨 JSX와 HTML의 차이점\n\nJSX에서는 HTML과 다르게 작성되는 속성들이 있다.\n예를 들어, class는 className으로, for는 htmlFor로 사용된다.\n\n- CamelCase 사용 🐫\n  - `<div tabIndex=\"0\"></div>`\n- data-와 aria- 속성은 그대로 사용 ✅\n  - `<div aria-label=\"Close\" data-testid=\"close-button\"></div>`\n\n### 💾 State란? 🤔\n\nState는 컴포넌트 내부에서 관리되는 데이터이다.\n사용자의 상호작용에 따라 동적으로 데이터를 변경할 수 있다.\n\n- 기본 사용법 🛠️\n\n  ```jsx\n  import { useState } from \"react\"\n\n  function Counter() {\n    const [count, setCount] = useState(0)\n\n    return (\n      <div>\n        <p>You clicked {count} times 🔥</p>\n        <button onClick={() => setCount(count + 1)}>Click me</button>\n      </div>\n    )\n  }\n  ```\n\n- State 값을 직접 변경하지 않고, 반드시 setState 함수(여기서는 setCount)를 사용해야 한다. 🔄[^2]\n\n이렇게 Props와 State를 이해하고 활용하면, React에서 더욱 동적이고 반응적인 웹 애플리케이션을 만들 수 있다! 🌈\n\n### State를 변경하는 두 가지 방법과 Object를 갖는 State를 만들 때 주의할 점 🛠️\n\nReact에서 State를 관리하는 방법은 매우 중요하다.\n특히, State가 객체를 포함할 때는 더욱 주의해야 한다.\nState를 변경하는 두 가지 방법과 객체를 포함하는 State를 만들 때 주의해야 할 점을 살펴보자.\n\n#### State 변경 방법\n\n1. setState 내에 변경할 값 넣기\n\n```jsx\nconst [count, setCount] = useState(0)\nsetCount(count + 1)\n```\n\n- 가장 기본적인 방법으로, 직접 변경할 값을 setState에 넣어준다.\n\n2. setState에 함수 넣기\n\n- 함수가 반환하는 값으로 State 변경\n- 현재 값을 기반으로 State를 변경하고자 하는 경우, 함수 넣기 방법을 권장\n\n```jsx\nconst [count, setCount] = useState(0)\nsetCount(current => {\n  return current + 1\n})\n```\n\n#### Object를 갖는 State 만들 때 주의할 점 🛠️\n\nObject를 값으로 갖는 State도 가능하지만, React가 State의 변경을 감지하지 못하는 경우가 있다.\n예를 들어, Object 내부의 속성만 변경되고 Object 자체는 변경되지 않았기 때문이다.\n\n```jsx\nconst [user, setUser] = useState({ name: \"sapiens\", age: 30 })\nsetUser(current => {\n  current.age = 29\n  return current\n})\n```\n\n- 위와 같이 사용하면, React는 user Object의 변경을 감지하지 못한다.\n\n이를 해결하기 위해서는, 기존 Object의 내용을 새로운 Object에 담고 변경해야 한다.\n즉, 새로운 Object를 생성하여 반환해야 React가 State의 변경을 감지할 수 있다.\n\n```jsx\nconst [user, setUser] = useState({ name: \"sapiens\", age: 30 })\nsetUser(current => {\n  const newUser = { ...current }\n  newUser.age = 29\n  return newUser\n})\n```\n\n- 이 방법을 사용하면, user의 age가 변경되었을 때 React가 이를 감지하고 UI를 업데이트할 수 있다.\n\nReact에서 State를 효과적으로 관리하는 것은 애플리케이션의 성능과 유지 보수성에 큰 영향을 미친다.\n특히, Object를 포함하는 State를 다룰 때는 불변성(Immutability)을 유지하는 것이 중요하다.\n이를 통해 예측 가능한 State 관리와 성능 최적화를 달성할 수 있다. 🚀[^3]\n\n[^1]: https://legacy.reactjs.org/docs/components-and-props.html\n[^2]: https://www.geeksforgeeks.org/reactjs-setstate/\n[^3]: https://ko.legacy.reactjs.org/docs/state-and-lifecycle.html\n"},{"excerpt":"React 기초 정리 📘 React는 웹 프론트엔드 개발에 혁신을 가져온 JavaScript 라이브러리.\n사용자 인터페이스를 구축하기 위해 개발되었으며, 컴포넌트 기반의 개발을 가능하게 한다. React의 기본 개념과 왜 React를 배워야 하는지, React의 특징, JSX의 활용, SPA의 개념, JSX와 일반 JavaScript의 차이점, Compo…","fields":{"slug":"/React-1-SPA-Component-State-CRA/"},"frontmatter":{"date":"May 01, 2023","title":"📘React 기초 정리 ","tags":["React","SPA","Component","Hook","JSX","NPM","Basic"]},"rawMarkdownBody":"\n# React 기초 정리 📘\n\nReact는 웹 프론트엔드 개발에 혁신을 가져온 JavaScript 라이브러리.\n사용자 인터페이스를 구축하기 위해 개발되었으며, 컴포넌트 기반의 개발을 가능하게 한다.\n\nReact의 기본 개념과 왜 React를 배워야 하는지, React의 특징, JSX의 활용, SPA의 개념, JSX와 일반 JavaScript의 차이점, Component의 개념과 활용, Component의 데이터 관리 방법등에 대해 알아보자.\n\n## [React](https://react.dev/)란? 🤔\n\n- 정의: React는 사용자 인터페이스를 구축하기 위한 JavaScript 라이브러리. Facebook에서 개발하였고, 컴포넌트 기반의 개발을 지향한다.[^1]\n- 특징:\n  - Component: 독립적인 단위로 쪼개어 구현되며, 레고 블럭처럼 여러 컴포넌트들을 조립하여 한 페이지를 완성한다.\n  - Virtual DOM: 가상의 DOM을 메모리에 저장하고, 실제 DOM과 동기화하는 프로그래밍 개념. 이를 통해 성능을 향상시킨다.\n  - JSX: JavaScript 내에서 HTML과 유사한 문법을 사용하여 UI를 표현한다. 이로 인해 개발자는 보다 직관적으로 UI를 구성할 수 있다.\n\n### SPA (Single Page Application)와 전통적인 사이트 비교 🔄\n\n- 전통적인 사이트: 페이지 변경이 필요할 때마다 서버에 요청하여 새로운 HTML을 받아오는 방식.\n  이 과정에서 페이지 전체를 새로 불러온다.\n\n  ```mermaid\n  sequenceDiagram\n    Client->>+Server: 최초 접속 요청\n    Server-->>+Client: HTML 전달\n    Client->>+Server: 데이터 전달 (Form Post)\n    Server-->>+Client: HTML 전달\n  ```\n\n- SPA: 초기 로딩 시 서버로부터 HTML을 받아온 후, 이후의 페이지 변경은 AJAX 통신을 통해 필요한 데이터만 JSON 형태로 받아와서 클라이언트에서 렌더링한다.\n  이 방식은 React를 포함한 현대적인 JavaScript 프레임워크/라이브러리에서 널리 사용된다.\n\n  ```mermaid\n  sequenceDiagram\n    Client->>+Server: 최초 접속 요청\n    Server-->>+Client: HTML 전달\n    Client->>+Server: 데이터 전달 (AJAX 통신)\n    Server-->>+Client: JSON 전달\n  ```\n\n## React를 공부해야 하는 이유 🚀\n\n- 생산성과 재사용성: 컴포넌트와 Hook을 활용하여 개발자의 생산성을 높이고, 코드의 재사용성을 증가시킨다.\n- 풍부한 자료와 라이브러리: React는 널리 사용되기 때문에 다양한 자료와 오픈소스 라이브러리를 쉽게 찾을 수 있다.\n- 다양한 사용처: React를 배우면 웹 애플리케이션 뿐만 아니라 React Native를 통해 모바일 애플리케이션 개발에도 활용할 수 있다.\n\nReact를 배우는 것은 현대 웹 개발의 트렌드를 따라가는 데 있어 필수적인 요소가 되었다고 할 수 있다.\n시작하기 전에, 기본적인 JavaScript 지식을 갖추는 것이 좋다.\nReact의 세계로! 🌟\n\n## React의 핵심 특징 정리 🌟\n\nReact는 현대 웹 개발에서 중요한 역할을 하는 JavaScript 라이브러리. React의 주요 특징들을 좀 더 자세히 살펴보자.[^2]\n\n### HTML과 JS 함께 사용하기 📝\n\n- 전통적인 방식 (jQuery 사용 예): HTML 요소를 JavaScript로 동적으로 추가하는 방식.\n  코드가 복잡해지고 유지보수가 어려워질 수 있다.\n\n  ```javascript\n  $(\"#todo-list\").append(\n    \"<li><span>\" +\n      value +\n      \"</span><button type='button' class='complete'>complete</button> <button type='button' class='delete'>delete</button></li>\"\n  )\n  ```\n\n- React 방식 (JSX 사용 예): HTML과 JavaScript를 함께 사용하여 UI를 선언적으로 표현한다.\n  코드가 더 간결하고 이해하기 쉽다.\n\n  ```jsx\n  <ol id=\"todo-list\">\n    {todoList.map((item, index) => (\n      <li className={item.isCompleted ? \"completed\" : \"\"}>\n        <span>{item.value}</span>\n        <button onClick={() => handleCompleteClick(index)}>complete</button>\n        <button onClick={() => handleDeleteClick(index)}>delete</button>\n      </li>\n    ))}\n  </ol>\n  ```\n\n### Component 기반 개발 🛠️\n\n- React는 컴포넌트 기반으로 개발된다.\n  각 컴포넌트는 독립적인 단위로, 재사용이 가능하며, 복잡한 UI도 쉽게 구성할 수 있다.\n\n  ```jsx\n  const App = () => {\n    const text = \"hello world\"\n    return <span>{text}</span>\n  }\n  ```\n\n### State를 통한 데이터 관리 🔄\n\n- React에서는 state를 사용하여 컴포넌트의 상태를 관리한다. state가 변경될 때마다 컴포넌트는 자동으로 다시 렌더링된다.\n  ```jsx\n  const [todoList, setTodoList] = useState([])\n  const [inputValue, setInputValue] = useState(\"\")\n  ```\n\nReact의 이러한 특징들은 개발자가 더 효율적으로 웹 애플리케이션을 구축할 수 있도록 돕는다.\nJSX, 컴포넌트, 그리고 상태 관리는 React 개발의 핵심을 이루며, 이를 통해 더 나은 사용자 경험을 제공하는 웹 애플리케이션을 만들 수 있다.\nReact를 배우고 싶다면, 이러한 개념들을 깊이 이해하는 것이 중요! 🚀\n\n## Create React App(CRA) 및 Node.js, NPM에 대한 정리 🚀\n\nCreate React App(CRA)은 React 프로젝트를 쉽게 시작할 수 있게 해주는 도구.[^3]\nFacebook에 의해 만들어졌으며, 프로젝트 생성부터 다양한 개발 도구를 제공한다.\nNode.js와 NPM은 CRA를 사용하여 React 프로젝트를 시작할 때 필수적인 환경이다.\n\n### Create React App(CRA) 🛠️\n\n- 개요: React 프로젝트를 쉽게 생성할 수 있도록 도와주는 Boilerplate.\n  직접 스크립트를 추가하여 사용하는 것도 가능하지만, CRA를 사용하면 더 편리하다.\n- 장점:\n  - 개발에 집중할 수 있도록 환경을 구성해준다.\n  - 다양한 브라우저에서 작동할 수 있도록 transcompile을 지원한다. (예: babel, webpack)\n- 사용 방법:[^4]\n  ```bash\n  npx create-react-app <directory name>\n  cd <directory name>\n  npm start\n  ```\n- [공식 문서 및 자세한 정보](https://create-react-app.dev/)\n\n### Node.js와 NPM 🌐\n\n- Node.js:\n  - 서버 프로그래밍에 주로 사용되는 JavaScript 기반의 소프트웨어 플랫폼.\n  - 프론트엔드 개발자가 서버 개발에 쉽게 접근할 수 있도록 도와준다.\n  - CRA를 사용한 React 프로젝트 생성 시 개발 환경 및 테스트 서버로 활용된다.\n- NPM (Node Package Manager):\n  - Node.js 환경에서 사용할 수 있는 패키지와 라이브러리를 관리하는 저장소.\n  - 패키지 관리와 서버 실행, 관리에 필요한 다양한 명령어를 제공한다.\n- 설치 및 사용:\n  - Node.js 설치:\n    - [Node.js 공식 홈페이지](https://nodejs.org/en) 에서 LTS 버전을 다운로드하고 설치한다.\n  - 버전 확인: `node -v` 명령어로 설치된 Node.js 버전을 확인할 수 있다.\n\n### React 프로젝트 생성 과정 📦\n\n1. Node.js 설치: 위에서 언급한 대로 LTS 버전을 설치.\n2. 프로젝트 생성: `npx create-react-app <directory name>` 명령어를 사용.\n3. 프로젝트 실행: 생성된 디렉토리로 이동한 후 npm start 명령어로 프로젝트를 실행.\n\n### npm 명령어 📚\n\n- `npm install`: package.json에 정의된 의존성 패키지들을 설치.\n- `npm install <package name>`: 원하는 패키지를 설치.\n- `npm install <package name>@<version>`: 특정 버전의 패키지를 설치.\n- `npm install <git repository 주소>`: git repository로부터 패키지를 설치.\n- `npm start`: Node.js를 이용해 프로젝트를 실행.\n- `npm build`: 프로젝트를 빌드.\n- [더 많은 명령어 참고](https://docs.npmjs.com/cli/v9/commands?v=true)\n\nCRA, Node.js, NPM을 활용하면 React 프로젝트를 효율적으로 시작하고 관리할 수 있다.\n이 도구들은 현대 웹 개발에서 중요한 역할을 하며, 개발자가 더 나은 웹 애플리케이션을 만들 수 있도록 돕는다. 🌟\n\n### React 프로젝트의 기본 구조 및 JSX 소개 📁\n\nReact 프로젝트를 시작하면 기본적으로 몇 가지 주요 디렉토리와 파일이 생성된다.\n이들은 프로젝트의 구조를 이해하고 관리하는 데 중요한 역할을 한다.\n또한, JSX는 React 개발에서 핵심적인 역할을 하는 문법으로, HTML과 유사하지만 JavaScript를 확장한 문법이다.[^5]\n\n#### Directory 구조 📂\n\n- `./node_modules/`: npm을 이용해 설치한 패키지 모음.\n- `./public/`: 정적인 파일들(HTML, 이미지 등)의 모음.\n- `./src/`: 리액트 개발을 위한 주요 소스 파일들이 위치한다.\n- `./.gitignore`: git에 올리지 않을 파일 설정을 포함한다.\n- `./package.json`: 프로젝트 관련 정보와 사용 패키지 명세 파일.\n  패키지 버전은 ^, <=, >= 등의 기호로 범위를 표현할 수 있다.\n- `./README.md`: 프로젝트에 관한 설명을 작성하는 파일.\n\n#### 설치한 라이브러리 불러오기 📚\n\n```jsx\nimport \"package name\" // CSS나 import만으로 역할을 하는 라이브러리\nimport something from \"package name\" // 기본적으로 불러와 활용할 때\nimport { a, b } from \"package name\" // 패키지 내 일부만 가져올 때\nimport * as something from \"package name\" // default로 export되지 않은 경우\n```\n\n## JSX 소개 ✨\n\nJSX는 JavaScript를 확장한 문법으로, UI가 어떻게 생겨야 하는지 설명하기 위해 React와 함께 사용된다.\nJSX는 React \"엘리먼트\"를 생성하며, HTML과 유사한 생김새를 가지지만 JavaScript의 모든 기능을 포함한다[^6].\n\n### JSX의 장점\n\n- 개발자 편의성의 향상\n- 협업 용이 및 생산성의 향상\n- 문법 오류 및 코드량 감소\n\n### JSX의 특징\n\n- HTML 태그 내에서 JavaScript 연산을 간결하게 표현할 수 있다.\n- HTML과의 차이점으로는 class 대신 className을 사용하고, 스타일은 객체 형태로 표현한다.\n- 닫는 태그가 필수이며, 최상단 element는 반드시 하나여야 한다.\n\n#### JSX와 JavaScript의 차이점\n\n- JSX는 사용자 인터페이스를 정의하는 데 사용되며, HTML처럼 보이지만 실제로는 JavaScript임.\n- React에서는 JSX를 통해 컴포넌트를 정의하고, 이를 통해 UI를 구성한다. 이는 기존 JavaScript와 HTML을 사용하는 방식과는 다른 접근 방식을 제공한다[^7].\n\nJSX는 React 개발에서 중요한 역할을 하며, 개발자가 보다 효율적으로 UI를 구성할 수 있도록 돕는다.\nReact 프로젝트의 구조와 JSX에 대해 이해하면, React 애플리케이션 개발에 있어 훨씬 더 편리하게 접근할 수 있다. 🚀\n\n#### 브라우저에 데이터 저장 및 UI 업데이트 방법 💾🔄\n\n브라우저에 데이터를 저장하고 UI를 업데이트하는 방법은 기술 스택에 따라 다르다.\nJavaScript와 React는 이러한 작업을 처리하는 데 있어 서로 다른 접근 방식을 제공한다.\n\n#### 브라우저에 데이터 저장 방법\n\n##### JavaScript\n\n- 사용자 데이터는 주로 DOM에 저장된다.\n  DOM은 브라우저가 만들고 유지 관리하는 전체 HTML을 나타낸다.\n- 사용자가 데이터를 입력하면, 개발자는 DOM에서 해당 값을 찾아 추출해야 한다.\n  이 과정은 관리가 번거로울 수 있다[^8].\n\n##### React\n\n- React에서는 제어 컴포넌트를 사용하여 사용자 입력을 기반으로 상태를 관리하고 업데이트한다.\n  이는 DOM에 의존하지 않고 JS 변수에 애플리케이션의 상태를 저장함으로써 이루어진다.\n- 이 방식은 애플리케이션이 성장함에 따라 더욱 중요해지며, 코드 관리가 편리해진다.\n\n#### UI 업데이트 방법\n\n##### JavaScript\n\n- UI 업데이트를 위해, 개발자는 DOM에서 요소를 찾고, 이벤트 리스너를 설정하여 사용자 상호작용에 반응해야 한다.\n  이 과정은 복잡하고 관리하기 어려울 수 있다.\n\n##### React\n\n- React는 상태 관리를 통해 UI를 자동으로 업데이트한다. 상태가 변경되면 React는 이를 감지하고 필요한 UI 부분만을 효율적으로 업데이트한다.\n- 이는 개발자가 UI 업데이트 로직에 집중하기보다는 사용자와의 상호작용 및 애플리케이션의 상태 관리에 더 집중할 수 있게 해준다[^9].\n\n브라우저에 데이터를 저장하고 UI를 업데이트하는 방법은 기술의 선택에 따라 크게 달라질 수 있다. JavaScript는 직접적인 DOM 조작에 의존하는 반면, React는 상태 관리를 통해 보다 선언적이고 효율적인 방식을 제공한다.\n이러한 차이점을 이해하는 것은 웹 개발에서 중요한 요소 중 하나. 🌟\n\n## React 컴포넌트 🎨\n\nReact에서 페이지를 구성하는 기본 단위인 컴포넌트에 대해 알아보자.\n컴포넌트는 React 애플리케이션의 핵심 요소로, 재사용 가능한 코드의 블록을 제공한다.\n\n### 컴포넌트란? 🤔\n\n- React에서의 역할: 페이지를 구성하는 최소 단위로, 재사용 가능한 UI 조각.\n- 네이밍 규칙: 컴포넌트의 이름은 대문자로 시작한다.\n  이는 일반 HTML 요소와 구별하기 위함임.\n\n#### 컴포넌트의 종류\n\n- Class 컴포넌트: 초기 React에서 주로 사용되었으며, Java 개발자에게 친숙한 개념.\n  React의 생명 주기를 쉽게 파악할 수 있다.\n- Function 컴포넌트: React v16부터 추가된 기능으로, 현재는 대부분의 컴포넌트가 이 형태로 사용된다.\n  Hook을 사용하여 상태 관리가 가능하다.\n\n#### Controlled Component와 Uncontrolled Component\n\n- Controlled Component: form을 통해 입력을 받을 때, 각 input의 데이터를 state를 통해 직접 관리한.\n- Uncontrolled Component: React로 input의 데이터를 직접 관리하지 않고, 필요할 때 DOM에서 직접 값을 가져온다.\n\n#### 컴포넌트의 특징\n\n- Props(Properties): 컴포넌트의 속성으로, 상위 컴포넌트로부터 데이터를 전달받는다.\n- Children: 컴포넌트 안에 작성된 하위 요소로, props의 일부로 취급된다.\n\n#### 컴포넌트의 데이터 관리\n\n- Props를 통한 데이터 전달: 컴포넌트 간 데이터는 props를 통해 부모에서 자식으로 전달된다.\n- State를 통한 내부 데이터 관리: 컴포넌트 내에서 데이터를 관리할 때는 state를 사용한다.\n\nReact 컴포넌트는 애플리케이션을 구성하는 데 있어 매우 중요한 역할을 한다.\n컴포넌트를 통해 UI를 모듈화하고 재사용 가능한 코드를 생성하여, 개발 과정을 효율적으로 만들 수 있다.\n데이터 관리에 대한 더 자세한 정보는 [여기](https://blog.stackademic.com/data-handling-in-react-components-props-state-and-best-practices-1c74ae800b43)에서 확인할 수 있다. 🌟\n\n[^1]: https://ko.legacy.reactjs.org/tutorial/tutorial.html\n[^2]: https://www.elancer.co.kr/blog/view?seq=167\n[^3]: https://create-react-app.dev/\n[^4]: https://legacy.reactjs.org/docs/create-a-new-react-app.html\n[^5]: https://ko.legacy.reactjs.org/docs/introducing-jsx.html\n[^6]: https://ko.legacy.reactjs.org/docs/introducing-jsx.html\n[^7]: https://www.w3schools.com/react/react_css.asp\n[^8]: https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Client-side_storage\n[^9]: https://www.linkedin.com/pulse/understanding-react-reconciliation-heartbeat-ui-updates-rostami\n"},{"excerpt":"아래 단계를 따라서 여러분의 블로그를 시작하세요. 굉장히 쉬워요 😉. SQL이란? 컴퓨터에 node.js 와 gatsby-cli 가 설치되어 있어야합니다. 2. 개발 서버 시작 이제 localhost:8000 으로 여러분의 블로그를 접속할 수 있습니다. 3. Github 레포지토리 생성 Utterance 댓글 위젯은 Github 이슈 시스템 기반입니다. …","fields":{"slug":"/SQL/"},"frontmatter":{"date":"March 16, 2023","title":"💾 SQL Basic - 1. 소개 및 기본 개념","tags":["SQL","RDB","Database","Basic"]},"rawMarkdownBody":"\n아래 단계를 따라서 여러분의 블로그를 시작하세요. 굉장히 쉬워요 😉.\n\n## SQL이란?\n\n> 컴퓨터에 **node.js** 와 **gatsby-cli** 가 설치되어 있어야합니다.\n\n```\n$ npx gatsby new my-hoodie-blog https://github.com/devHudi/gatsby-starter-hoodie\n```\n\n## 2. 개발 서버 시작\n\n```\n$ cd my-hoodie-blog\n$ npm run start\n```\n\n이제 localhost:8000 으로 여러분의 블로그를 접속할 수 있습니다.\n\n## 3. Github 레포지토리 생성\n\nUtterance 댓글 위젯은 **Github 이슈 시스템** 기반입니다. 따라서 각 블로그 별 Github 레포지토리가 필요합니다. 또한 여러분이 Github Pages 혹은 Netlify 로 블로그를 배포하길 원한다면, Github 레포지토리는 필수입니다.\n\n만약 Github 레포지토리를 생성하는 법을 모른다면, [Github 공식 문서](https://docs.github.com/en/github/getting-started-with-github/create-a-repo) 를 참조하세요.\n\n### 원격 레포지토리 등록\n\n```\ngit remote add origin https://github.com/{YOUR_GITHUB_NAME}/{YOUR_REPOSITORY_NAME}\n```\n\n## 4. blog-config.js 작성\n\n```javascript\nmodule.exports = {\n  title: \"MY BLOG\",\n  description: \"Hello, This is my blog\",\n  author: \"YOUR NAME\",\n  siteUrl: \"https://myblog.com\",\n  links: {\n    github: \"https://github.com\",\n    facebook: \"https://www.facebook.com\",\n    instagram: \"https://www.instagram.com\",\n    etc: \"https://www.google.com/\",\n  },\n  utterances: {\n    repo: \"{YOUR_GITHUB_NAME}/{YOUR_REPOSITORY_NAME}\",\n    type: \"pathname\",\n  },\n}\n```\n\ngatsby-starter-hoodie 는 `blog-config.js` 라는 설정 파일을 제공합니다. 이 파일에서 블로그 정보, 작성자 프로필, Utterance 설정 등을 작성할 수 있습니다. 여러분 블로그 설정에 맞게 `blog-config.js` 를 설정하세요. 하지만, `utterances.type` 속성은 수정하지 않는 것을 권장합니다.\n\n### 프로필 이미지 변경\n\n`static/profile.png` 에 위치한 이미지 파일을 원하는 이미지 파일로 교체하세요. 만약 파일명을 변경하고 싶다면, `src/components/Bio.jsx` 의 소스코드를 수정해야합니다.\n\n## 5. 포스트 추가\n\n마크다운 포스트는 `contents/posts` 경로에 위치해있습니다. 해당 경로에서 글을 작성할 수 있습니다. [여기를 클릭하여](https://devHudi.github.io/gatsby-starter-hoodie/writing-guide) 더 자세한 글 작성 방법을 확인하세요.\n\n## 6. 블로그 배포하기\n\n### 6-1 Netlify 를 통해\n\n[A Step-by-Step Guide: Gatsby on Netlify](https://www.netlify.com/blog/2016/02/24/a-step-by-step-guide-gatsby-on-netlify/) 문서를 참조하여, Netlify 를 Github 레포지토리와 연결할 수 있습니다. 이 과정은 어렵지 않습니다.\n\nGithub 레포지토리와 연결이 되었다면, Github 레포지토리에 변경사항이 발생할 때 마다 자동으로 여러분의 블로그에 배포됩니다.\n\n### 6-2. Github Pages 를 통해\n\n#### 상황 1\n\n레포지토리 이름이 `{YOUR_GITHUB_NAME}.github.io` 형태일 경우, 아래 명령어를 실행해주세요.\n\n```\n$ npm run deploy-gh\n```\n\n#### 상황 2\n\n레포지토리 이름이 `{YOUR_GITHUB_NAME}.github.io` 형태가 아닐 경우, 아래 명령어를 실행해주세요.\n\n```\n$ npm run deploy-gh-prefix-paths\n```\n\n만약 위와 같은 경우 `gatsby-config.js` 에서 `pathPrefix` 를 여러분의 레포지토리 이름으로 바꿔야합니다.\n\n### 6-3. 다른 플랫폼\n\n```\n$ npm run build\n```\n\n위 명령어로 Gastby 웹사이트를 빌드할 수 있습니다. 빌드 결과물은 `/public` 에 저장됩니다. `/public` 디렉토리를 여러분이 사용하는 플랫폼의 배포 명령을 통해 배포해주세요.\n\n## 7. 커스터마이징\n\n### 프로젝트 구조\n\n아래 프로젝트 구조를 참고하여 커스터마이징 할 수 있습니다 🙊.\n\n```\n├── node_modules\n├── contents\n│   └── posts // your articles are here\n├── public // build outputs are here\n└── src\n    ├── assets\n    │   └── theme // theme config is here\n    ├── components\n    │   └── Article\n    │       └── Body\n    │           └── StyledMarkdown\n    │               └── index.jsx // markdown styles are here\n    │   ...\n    ├── fonts // webfonts are here\n    ├── hooks\n    ├── images\n    ├── pages // page components are here\n    ├── reducers\n    ├── templates // post components are here\n    └── utils\n```\n"}]}},"pageContext":{}},"staticQueryHashes":[],"slicesMap":{}}