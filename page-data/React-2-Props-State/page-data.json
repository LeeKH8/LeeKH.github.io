{"componentChunkName":"component---src-templates-post-jsx","path":"/React-2-Props-State/","result":{"data":{"site":{"siteMetadata":{"title":"leekh8"}},"markdownRemark":{"id":"0027d780-dc00-5deb-8468-93cd387eef09","excerpt":"React 기초 정리 📘 Props와 State: React 컴포넌트의 핵심 이해하기 🚀 React를 사용하여 멋진 웹 애플리케이션을 만들기 위해 반드시 알아야 할 두 가지 개념, Props와 State에 대해 자세히 알아보자. 📦 Props란? 🤔 Props는 properties의 줄임말로, 컴포넌트 간에 데이터를 전달할 때 사용하는 입력값이다.\n부모 …","html":"<h2>React 기초 정리 📘</h2>\n<h2>Props와 State: React 컴포넌트의 핵심 이해하기 🚀</h2>\n<p>React를 사용하여 멋진 웹 애플리케이션을 만들기 위해 반드시 알아야 할 두 가지 개념, Props와 State에 대해 자세히 알아보자.<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup></p>\n<h3>📦 Props란? 🤔</h3>\n<p>Props는 properties의 줄임말로, 컴포넌트 간에 데이터를 전달할 때 사용하는 입력값이다.\n부모 컴포넌트로부터 자식 컴포넌트로 데이터를 넘겨줄 수 있다.</p>\n<ul>\n<li>\n<p>기본 사용법 🛠️</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 컴포넌트 생성</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Welcome</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> 🌟</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 컴포넌트 사용</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Welcome</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Amy<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Welcome</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Andy<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Welcome</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Sapiens<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>Props는 읽기 전용.</li>\n<li>\n<p>컴포넌트 내에서 Props를 변경하려고 하면 안 된다. 🚫</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 잘못된 예</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Welcome</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">let</span> greeting <span class=\"token operator\">=</span> <span class=\"token string\">\"Sir \"</span> <span class=\"token operator\">+</span> props<span class=\"token punctuation\">.</span>name <span class=\"token comment\">// 이렇게 사용하세요!</span>\n<span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span>greeting<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h3>🎨 JSX와 HTML의 차이점</h3>\n<p>JSX에서는 HTML과 다르게 작성되는 속성들이 있다.\n예를 들어, class는 className으로, for는 htmlFor로 사용된다.</p>\n<ul>\n<li>\n<p>CamelCase 사용 🐫</p>\n<ul>\n<li><code class=\"language-text\">&lt;div tabIndex=\"0\">&lt;/div></code></li>\n</ul>\n</li>\n<li>\n<p>data-와 aria- 속성은 그대로 사용 ✅</p>\n<ul>\n<li><code class=\"language-text\">&lt;div aria-label=\"Close\" data-testid=\"close-button\">&lt;/div></code></li>\n</ul>\n</li>\n</ul>\n<h3>💾 State란? 🤔</h3>\n<p>State는 컴포넌트 내부에서 관리되는 데이터이다.\n사용자의 상호작용에 따라 동적으로 데이터를 변경할 수 있다.</p>\n<ul>\n<li>\n<p>기본 사용법 🛠️</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">You clicked </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> times 🔥</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Click me</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>State 값을 직접 변경하지 않고, 반드시 setState 함수(여기서는 setCount)를 사용해야 한다. 🔄<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup></li>\n</ul>\n<p>이렇게 Props와 State를 이해하고 활용하면, React에서 더욱 동적이고 반응적인 웹 애플리케이션을 만들 수 있다! 🌈</p>\n<h3>State를 변경하는 두 가지 방법과 Object를 갖는 State를 만들 때 주의할 점 🛠️</h3>\n<p>React에서 State를 관리하는 방법은 매우 중요하다.\n특히, State가 객체를 포함할 때는 더욱 주의해야 한다.\nState를 변경하는 두 가지 방법과 객체를 포함하는 State를 만들 때 주의해야 할 점을 살펴보자.</p>\n<h4>State 변경 방법</h4>\n<ol>\n<li>setState 내에 변경할 값 넣기</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>가장 기본적인 방법으로, 직접 변경할 값을 setState에 넣어준다.</li>\n<li>setState에 함수 넣기</li>\n<li>함수가 반환하는 값으로 State 변경</li>\n<li>현재 값을 기반으로 State를 변경하고자 하는 경우, 함수 넣기 방법을 권장</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">current</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> current <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4>Object를 갖는 State 만들 때 주의할 점 🛠️</h4>\n<p>Object를 값으로 갖는 State도 가능하지만, React가 State의 변경을 감지하지 못하는 경우가 있다.\n예를 들어, Object 내부의 속성만 변경되고 Object 자체는 변경되지 않았기 때문이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>user<span class=\"token punctuation\">,</span> setUser<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sapiens\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">30</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">setUser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">current</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  current<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">29</span>\n  <span class=\"token keyword\">return</span> current\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>위와 같이 사용하면, React는 user Object의 변경을 감지하지 못한다.</li>\n</ul>\n<p>이를 해결하기 위해서는, 기존 Object의 내용을 새로운 Object에 담고 변경해야 한다.\n즉, 새로운 Object를 생성하여 반환해야 React가 State의 변경을 감지할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>user<span class=\"token punctuation\">,</span> setUser<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sapiens\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">30</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">setUser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">current</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> newUser <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>current <span class=\"token punctuation\">}</span>\n  newUser<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">29</span>\n  <span class=\"token keyword\">return</span> newUser\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>이 방법을 사용하면, user의 age가 변경되었을 때 React가 이를 감지하고 UI를 업데이트할 수 있다.</li>\n</ul>\n<p>React에서 State를 효과적으로 관리하는 것은 애플리케이션의 성능과 유지 보수성에 큰 영향을 미친다.\n특히, Object를 포함하는 State를 다룰 때는 불변성(Immutability)을 유지하는 것이 중요하다.\n이를 통해 예측 가능한 State 관리와 성능 최적화를 달성할 수 있다. 🚀<sup id=\"fnref-3\"><a href=\"#fn-3\" class=\"footnote-ref\">3</a></sup></p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://legacy.reactjs.org/docs/components-and-props.html\">https://legacy.reactjs.org/docs/components-and-props.html</a></p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p><a href=\"https://www.geeksforgeeks.org/reactjs-setstate/\">https://www.geeksforgeeks.org/reactjs-setstate/</a></p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-3\">\n<p><a href=\"https://ko.legacy.reactjs.org/docs/state-and-lifecycle.html\">https://ko.legacy.reactjs.org/docs/state-and-lifecycle.html</a></p>\n<a href=\"#fnref-3\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","frontmatter":{"title":"📘React 기초 정리 2 ","date":"May 02, 2023","update":"March 29, 2024","tags":["React","Props","State","Basic"],"series":"React Basic"},"fields":{"slug":"/React-2-Props-State/","readingTime":{"minutes":5.165}}},"seriesList":{"edges":[{"node":{"id":"6afe04ff-eeb2-5b3b-870d-ecddd4915470","fields":{"slug":"/React-1-SPA-Component-State-CRA/"},"frontmatter":{"title":"📘React 기초 정리 "}}},{"node":{"id":"0027d780-dc00-5deb-8468-93cd387eef09","fields":{"slug":"/React-2-Props-State/"},"frontmatter":{"title":"📘React 기초 정리 2 "}}},{"node":{"id":"af2a64d0-428e-5d17-8f1e-02c9824f1918","fields":{"slug":"/React-3-Props-State/"},"frontmatter":{"title":"📘React 기초 정리 3 "}}}]},"previous":{"fields":{"slug":"/React-1-SPA-Component-State-CRA/"},"frontmatter":{"title":"📘React 기초 정리 "}},"next":{"fields":{"slug":"/React-3-Props-State/"},"frontmatter":{"title":"📘React 기초 정리 3 "}}},"pageContext":{"id":"0027d780-dc00-5deb-8468-93cd387eef09","series":"React Basic","previousPostId":"6afe04ff-eeb2-5b3b-870d-ecddd4915470","nextPostId":"af2a64d0-428e-5d17-8f1e-02c9824f1918"}},"staticQueryHashes":[],"slicesMap":{}}